name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  # Fast-fail gate: Run the primary test first
  gate-test:
    name: Gate Test (Unix Go 1.25)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.25-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.25-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Additional tests only run if gate passes
  test-matrix:
    name: Test (Go ${{ matrix.go }}, ${{ matrix.os }})
    needs: gate-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Only additional test combinations
        include:
          - os: ubuntu-latest
            go: '1.24'
          - os: windows-latest
            go: '1.25'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: go test -v -race ./...

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: go test -v -race ./...

  lint:
    name: Lint
    needs: gate-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Run go vet
        run: go vet ./...

      - name: Check formatting
        run: |
          gofmt -l .
          test -z "$(gofmt -l .)" || (echo "Code is not formatted. Run 'gofmt -w .'" && exit 1)

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8
          args: --timeout=5m

  build:
    name: Build (${{ matrix.goos }}-${{ matrix.goarch }})
    needs:
      - gate-test
      - lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Only verify builds for primary platforms
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          # Build filemirror binary
          FILEMIRROR_NAME=filemirror-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            FILEMIRROR_NAME="${FILEMIRROR_NAME}.exe"
          fi
          go build -ldflags="-s -w" -o "dist/${FILEMIRROR_NAME}" ./cmd/filemirror

          # Build fmr binary
          FMR_NAME=fmr-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            FMR_NAME="${FMR_NAME}.exe"
          fi
          go build -ldflags="-s -w" -o "dist/${FMR_NAME}" ./cmd/fmr
          ls -lh dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          retention-days: 7
