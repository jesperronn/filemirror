#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$PROJECT_ROOT"

# Build configuration
BINARY_NAMES=("filemirror" "fmr")
VERSION="${VERSION:-$(git describe --tags --always --dirty 2>/dev/null || echo "dev")}"
BUILD_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
GIT_COMMIT="$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")"

# Parse command line arguments
VERBOSE=false
CLEAN=false
INSTALL=false
BUILD_TARGET="" # Can be "filemirror", "fmr", or "" (both)
TARGET_OS="${GOOS:-$(go env GOOS)}"
TARGET_ARCH="${GOARCH:-$(go env GOARCH)}"

usage() {
    cat << EOF
Usage: bin/build [OPTIONS]

Build the FileMirror binaries (filemirror and fmr) with optimizations and metadata.

OPTIONS:
    -v, --verbose       Verbose output
    -c, --clean         Clean before building
    -i, --install       Install to \$GOPATH/bin after building
    -b, --binary NAME   Build specific binary (filemirror or fmr), default: both
    -o, --os OS         Target OS (default: current)
    -a, --arch ARCH     Target architecture (default: current)
    -h, --help          Show this help message

EXAMPLES:
    bin/build                         # Build both binaries for current platform
    bin/build --clean                 # Clean and build both
    bin/build --binary fmr            # Build only fmr
    bin/build --binary filemirror     # Build only filemirror
    bin/build --install               # Build both and install to \$GOPATH/bin
    bin/build -o linux -a amd64       # Cross-compile both for Linux AMD64

EOF
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -i|--install)
            INSTALL=true
            shift
            ;;
        -b|--binary)
            BUILD_TARGET="$2"
            shift 2
            ;;
        -o|--os)
            TARGET_OS="$2"
            shift 2
            ;;
        -a|--arch)
            TARGET_ARCH="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo -e "${RED}Error: Unknown option $1${NC}"
            usage
            ;;
    esac
done

log_info() {
    echo -e "${BLUE}==>${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}!${NC} $1"
}

# Clean build artifacts
if [ "$CLEAN" = true ]; then
    log_info "Cleaning build artifacts..."
    rm -f filemirror fmr filemirror-* fmr-* *.exe
    rm -rf dist/
    log_success "Clean complete"
fi

# Determine which binaries to build
BINARIES_TO_BUILD=()
if [ -z "$BUILD_TARGET" ]; then
    BINARIES_TO_BUILD=("${BINARY_NAMES[@]}")
elif [[ " ${BINARY_NAMES[*]} " =~ " ${BUILD_TARGET} " ]]; then
    BINARIES_TO_BUILD=("$BUILD_TARGET")
else
    log_error "Invalid binary target: $BUILD_TARGET"
    echo "Valid targets: filemirror, fmr"
    exit 1
fi

# Show build info
log_info "Building FileMirror binaries: ${BINARIES_TO_BUILD[*]}"
echo "  Version:      $VERSION"
echo "  Git Commit:   $GIT_COMMIT"
echo "  Build Time:   $BUILD_TIME"
echo "  Target OS:    $TARGET_OS"
echo "  Target Arch:  $TARGET_ARCH"
echo ""

# Run tests first
log_info "Running tests..."
if [ "$VERBOSE" = true ]; then
    go test -v ./...
else
    go test ./...
fi
log_success "All tests passed"

# Check for common issues
log_info "Running go vet..."
go vet ./...
log_success "go vet passed"

log_info "Checking for formatting issues..."
if ! gofmt -l . | grep -q .; then
    log_success "Code is properly formatted"
else
    log_warn "Some files need formatting (run: gofmt -w .)"
fi

# Build flags
LDFLAGS="-s -w"
LDFLAGS="$LDFLAGS -X github.com/jesperronn/filemirror-fmr.Version=$VERSION"
LDFLAGS="$LDFLAGS -X github.com/jesperronn/filemirror-fmr.BuildTime=$BUILD_TIME"
LDFLAGS="$LDFLAGS -X github.com/jesperronn/filemirror-fmr.GitCommit=$GIT_COMMIT"

# Build each binary
for BINARY_NAME in "${BINARIES_TO_BUILD[@]}"; do
    log_info "Building $BINARY_NAME..."
    
    # Determine output binary name
    OUTPUT_BINARY="$BINARY_NAME"
    if [ "$TARGET_OS" != "$(go env GOOS)" ] || [ "$TARGET_ARCH" != "$(go env GOARCH)" ]; then
        OUTPUT_BINARY="${BINARY_NAME}-${TARGET_OS}-${TARGET_ARCH}"
    fi
    if [ "$TARGET_OS" = "windows" ]; then
        OUTPUT_BINARY="${OUTPUT_BINARY}.exe"
    fi

    # Build
    BUILD_CMD="go build -ldflags=\"$LDFLAGS\" -o \"$OUTPUT_BINARY\" ./cmd/$BINARY_NAME"

    if [ "$VERBOSE" = true ]; then
        echo "  Command: $BUILD_CMD"
    fi

    GOOS="$TARGET_OS" GOARCH="$TARGET_ARCH" eval "$BUILD_CMD"

    # Check if build was successful
    if [ -f "$OUTPUT_BINARY" ]; then
        BINARY_SIZE=$(du -h "$OUTPUT_BINARY" | cut -f1)
        log_success "Build complete: $OUTPUT_BINARY ($BINARY_SIZE)"
    else
        log_error "Build failed for $BINARY_NAME"
        exit 1
    fi

    # Install if requested
    if [ "$INSTALL" = true ]; then
        log_info "Installing $BINARY_NAME to \$GOPATH/bin..."
        GOBIN="${GOBIN:-$(go env GOPATH)/bin}"
        mkdir -p "$GOBIN"
        cp "$OUTPUT_BINARY" "$GOBIN/$BINARY_NAME"
        log_success "Installed to $GOBIN/$BINARY_NAME"
    fi

    # Show binary info
    if [ "$VERBOSE" = true ]; then
        log_info "Binary information for $BINARY_NAME:"
        file "$OUTPUT_BINARY" 2>/dev/null || true
        echo ""
    fi

    # Verify it runs
    if [ "$TARGET_OS" = "$(go env GOOS)" ] && [ "$TARGET_ARCH" = "$(go env GOARCH)" ]; then
        log_info "Verifying $BINARY_NAME..."
        if "./$OUTPUT_BINARY" --version >/dev/null 2>&1; then
            log_success "Binary verification passed"
            if [ "$VERBOSE" = true ]; then
                "./$OUTPUT_BINARY" --version
            fi
        else
            log_warn "Binary verification failed (might be expected for cross-compiled binaries)"
        fi
    fi
    echo ""
done
log_success "Build completed successfully!"
