#!/usr/bin/env bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to display usage
usage() {
	cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Create an annotated git tag for a new release.

OPTIONS:
	--major         Bump major version (X.0.0)
	--minor         Bump minor version (X.Y.0)
	--patch         Bump patch version (X.Y.Z)
	-i, --interactive   Always prompt for version, even if version bump is specified
	-h, --help      Show this help message

EXAMPLES:
	$(basename "$0")                  # Prompt with latest tag
	$(basename "$0") --patch          # Auto-bump patch version
	$(basename "$0") --minor -i       # Bump minor but confirm interactively
	$(basename "$0") --major          # Auto-bump major version

EOF
	exit 1
}

# Function to get the latest tag
get_latest_tag() {
	local latest
	latest=$(git tag -l 'v*.*.*' | sort --version-sort | tail -n 1)
	if [[ -z "$latest" ]]; then
		echo "v0.0.0"
	else
		echo "$latest"
	fi
}

# Function to parse version from tag
parse_version() {
	local tag=$1
	# Remove 'v' prefix
	echo "${tag#v}"
}

# Function to bump version
bump_version() {
	local version=$1
	local bump_type=$2

	IFS='.' read -r major minor patch <<< "$version"

	case "$bump_type" in
		major)
			major=$((major + 1))
			minor=0
			patch=0
			;;
		minor)
			minor=$((minor + 1))
			patch=0
			;;
		patch)
			patch=$((patch + 1))
			;;
		*)
			echo "Invalid bump type: $bump_type" >&2
			exit 1
			;;
	esac

	echo "$major.$minor.$patch"
}

# Function to prompt for version
prompt_version() {
	local suggested=$1
	local version

	echo -e "${YELLOW}Current latest tag: $(get_latest_tag)${NC}" >&2
	echo "" >&2
	read -r -p "Enter version (with 'v' prefix) [v$suggested]: " version

	# Use suggested version if empty
	if [[ -z "$version" ]]; then
		version="v$suggested"
	fi

	# Ensure 'v' prefix exists
	if [[ ! "$version" =~ ^v ]]; then
		version="v$version"
	fi

	# Remove 'v' prefix for validation
	local version_number="${version#v}"

	# Validate version format
	if ! [[ "$version_number" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
		echo -e "${RED}Error: Invalid version format. Expected: vX.Y.Z${NC}" >&2
		exit 1
	fi

	echo "$version_number"
}

# Function to create annotated tag
create_tag() {
	local version=$1
	local tag="v$version"

	# Check if repository has any commits
	if ! git rev-parse HEAD >/dev/null 2>&1; then
		echo -e "${RED}Error: No commits found. Create at least one commit before tagging.${NC}" >&2
		exit 1
	fi

	# Check if tag already exists
	if git rev-parse "$tag" >/dev/null 2>&1; then
		echo -e "${RED}Error: Tag $tag already exists${NC}" >&2
		exit 1
	fi

	echo "" >&2
	echo -e "${GREEN}Creating annotated tag: $tag${NC}" >&2

	# Create the tag with tag name as annotation
	git tag -a "$tag" -m "$tag"

	echo "" >&2
	echo -e "${GREEN}âœ“ Tag $tag created successfully${NC}" >&2
	echo "" >&2
	echo "To push the tag to remote, run:" >&2
	echo "  git push origin $tag" >&2
}

# Main script
main() {
	local bump_type=""
	local interactive=false

	# Parse arguments
	while [[ $# -gt 0 ]]; do
		case "$1" in
			--major)
				bump_type="major"
				shift
				;;
			--minor)
				bump_type="minor"
				shift
				;;
			--patch)
				bump_type="patch"
				shift
				;;
			-i|--interactive)
				interactive=true
				shift
				;;
			-h|--help)
				usage
				;;
			*)
				echo -e "${RED}Error: Unknown option: $1${NC}" >&2
				usage
				;;
		esac
	done

	# Get latest tag
	local latest_tag
	latest_tag=$(get_latest_tag)

	# Parse current version
	local current_version
	current_version=$(parse_version "$latest_tag")

	# Calculate suggested version
	local suggested_version
	if [[ "$current_version" == "0.0.0" ]]; then
		# No existing tags, suggest v1.0.0
		suggested_version="1.0.0"
	elif [[ -n "$bump_type" ]]; then
		suggested_version=$(bump_version "$current_version" "$bump_type")
	else
		# Default to patch bump as suggestion
		suggested_version=$(bump_version "$current_version" "patch")
	fi

	# Get final version
	local final_version
	if [[ "$interactive" == true ]] || [[ -z "$bump_type" ]]; then
		final_version=$(prompt_version "$suggested_version")
	else
		final_version="$suggested_version"
		echo -e "${YELLOW}Auto-bumping version to: v$final_version${NC}" >&2
	fi

	# Create the tag
	create_tag "$final_version"
}

# Run main function
main "$@"
