#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$PROJECT_ROOT"

usage() {
    cat << EOF
Usage: bin/setup [OPTIONS]

Set up the development environment for multiedit.

This script will:
    1. Check for required tools (Go, Git)
    2. Install Go dependencies
    3. Install optional development tools
    4. Run initial tests to verify setup

OPTIONS:
    -f, --full          Install all optional tools
    -h, --help          Show this help message

EXAMPLES:
    bin/setup           # Basic setup
    bin/setup --full    # Setup with all optional tools

EOF
    exit 0
}

FULL_SETUP=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--full)
            FULL_SETUP=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo -e "${RED}Error: Unknown option $1${NC}"
            usage
            ;;
    esac
done

log_info() {
    echo -e "${BLUE}==>${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}!${NC} $1"
}

# Check prerequisites
log_info "Checking prerequisites..."

# Check Go
if command -v go &> /dev/null; then
    GO_VERSION=$(go version | awk '{print $3}')
    log_success "Go is installed ($GO_VERSION)"
else
    log_error "Go is not installed"
    echo "  Please install Go from https://golang.org/dl/"
    exit 1
fi

# Check Git
if command -v git &> /dev/null; then
    GIT_VERSION=$(git --version | awk '{print $3}')
    log_success "Git is installed ($GIT_VERSION)"
else
    log_error "Git is not installed"
    echo "  Please install Git from https://git-scm.com/"
    exit 1
fi

# Install Go dependencies
log_info "Installing Go dependencies..."
if go mod download; then
    log_success "Go dependencies installed"
else
    log_error "Failed to install Go dependencies"
    exit 1
fi

# Verify dependencies
log_info "Verifying dependencies..."
if go mod verify; then
    log_success "Dependencies verified"
else
    log_error "Dependency verification failed"
    exit 1
fi

# Install optional development tools
if [ "$FULL_SETUP" = true ]; then
    log_info "Installing optional development tools..."

    # golangci-lint
    if ! command -v golangci-lint &> /dev/null; then
        log_info "Installing golangci-lint..."
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        log_success "golangci-lint installed"
    else
        log_success "golangci-lint already installed"
    fi
else
    log_info "Checking optional tools..."

    if ! command -v golangci-lint &> /dev/null; then
        log_warn "golangci-lint not installed (recommended for development)"
        echo "  To install: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
        echo "  Or run: bin/setup --full"
    else
        log_success "golangci-lint is installed"
    fi
fi

# Run tests to verify setup
log_info "Running tests to verify setup..."
if go test ./...; then
    log_success "All tests passed"
else
    log_error "Tests failed"
    exit 1
fi

# Build the binary
log_info "Building multiedit binary..."
if go build -o multiedit .; then
    log_success "Binary built successfully"
else
    log_error "Build failed"
    exit 1
fi

# Make sure bin scripts are executable
log_info "Setting permissions on bin scripts..."
chmod +x bin/*
log_success "Permissions set"

echo ""
log_success "Setup completed successfully!"
echo ""
echo "You can now:"
echo "  - Run tests:         bin/test"
echo "  - Run linter:        bin/lint"
echo "  - Build project:     bin/build"
echo "  - Run multiedit:     ./multiedit"
echo ""
echo "For help, run:         ./multiedit --help"
