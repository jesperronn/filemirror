#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$PROJECT_ROOT"

# Parse command line arguments
FIX=false
VERBOSE=false

usage() {
    cat << EOF
Usage: bin/lint [OPTIONS]

Run linters and code quality checks for the FileMirror project.

OPTIONS:
    -f, --fix           Automatically fix issues where possible
    -v, --verbose       Verbose output
    -h, --help          Show this help message

EXAMPLES:
    bin/lint            # Run all linters
    bin/lint --fix      # Run and fix issues automatically
    bin/lint --verbose  # Run with verbose output

LINTERS:
    - go fmt            Format checking
    - go vet            Static analysis
    - golangci-lint     Comprehensive linting (if installed)
    - shellcheck        Shell script analysis (if installed)

EOF
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--fix)
            FIX=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo -e "${RED}Error: Unknown option $1${NC}"
            usage
            ;;
    esac
done

log_info() {
    echo -e "${BLUE}==>${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}!${NC} $1"
}

ERRORS=0

# Check formatting
log_info "Checking code formatting..."
UNFORMATTED=$(gofmt -l . | grep -v vendor || true)
if [ -z "$UNFORMATTED" ]; then
    log_success "All files are properly formatted"
else
    if [ "$FIX" = true ]; then
        log_info "Fixing formatting issues..."
        gofmt -w .
        log_success "Formatting fixed"
    else
        log_error "The following files need formatting:"
        echo "$UNFORMATTED"
        echo ""
        echo "Run 'bin/lint --fix' or 'gofmt -w .' to fix"
        ERRORS=$((ERRORS + 1))
    fi
fi

# Run go vet
log_info "Running go vet..."
if go vet ./...; then
    log_success "go vet passed"
else
    log_error "go vet found issues"
    ERRORS=$((ERRORS + 1))
fi

# Check for golangci-lint
if command -v golangci-lint &> /dev/null; then
    log_info "Running golangci-lint..."
    GOLANGCI_ARGS=""
    if [ "$FIX" = true ]; then
        GOLANGCI_ARGS="--fix"
    fi
    if golangci-lint run $GOLANGCI_ARGS ./...; then
        log_success "golangci-lint passed"
    else
        log_error "golangci-lint found issues"
        ERRORS=$((ERRORS + 1))
    fi
else
    log_warn "golangci-lint not installed (optional but recommended)"
    echo "  To install: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
fi

# Check for shellcheck
if command -v shellcheck &> /dev/null; then
    log_info "Running shellcheck..."
    # Find all shell scripts in bin directory
    SHELL_SCRIPTS=$(find bin -type f -executable -not -name ".*" 2>/dev/null || true)
    if [ -n "$SHELL_SCRIPTS" ]; then
        if echo "$SHELL_SCRIPTS" | xargs shellcheck; then
            log_success "shellcheck passed"
        else
            log_error "shellcheck found issues"
            ERRORS=$((ERRORS + 1))
        fi
    else
        log_info "No shell scripts found to check"
    fi
else
    log_warn "shellcheck not installed (optional but recommended)"
    echo "  To install: brew install shellcheck (macOS) or apt-get install shellcheck (Linux)"
fi

# Check for common issues
log_info "Checking for common issues..."

# Check for TODO comments
TODOS=$(grep -rn "TODO" --include="*.go" . || true)
if [ -n "$TODOS" ]; then
    TODO_COUNT=$(echo "$TODOS" | wc -l | tr -d ' ')
    log_warn "Found $TODO_COUNT TODO comments"
    if [ "$VERBOSE" = true ]; then
        echo "$TODOS"
    fi
fi

# Check for FIXME comments
FIXMES=$(grep -rn "FIXME" --include="*.go" . || true)
if [ -n "$FIXMES" ]; then
    FIXME_COUNT=$(echo "$FIXMES" | wc -l | tr -d ' ')
    log_warn "Found $FIXME_COUNT FIXME comments"
    if [ "$VERBOSE" = true ]; then
        echo "$FIXMES"
    fi
fi

# Summary
echo ""
if [ $ERRORS -eq 0 ]; then
    log_success "All linting checks passed!"
    exit 0
else
    log_error "Linting found $ERRORS issue(s)"
    exit 1
fi
